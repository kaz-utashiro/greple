=head1 NAME

greple - grep with multiple keywords

=head1 SYNOPSIS

B<greple> [ B<-options> ] pattern [ file... ]

    pattern           'positive -negative ?alternative'

    -e pattern        regex pattern match across line boundary
    -v pattern        regex pattern not to be matched
    --le pattern      lexical expression (same as bare pattern)
    --re pattern      regular expression
    --fe pattern      fixed expression

B<OPTIONS>

    -i                ignore case
    -l                list filename only
    -c                print count of matched block only
    -o                print only the matching part
    -n                print line number
    -h                do not display filenames
    -H                always display filenames
    -p                paragraph mode
    -A[n]             after match context
    -B[n]             before match context
    -C[n]             after and before match context
    -f file           file contains search pattern
    -Z                do not uncompress automatically
    -d flags          display info (f:file d:dir c:count m:misc s:stat)

    --man             show manual page
    --color=when      use termninal color (auto, always, never)
    --colormode=mode  Red, Green, Blue, Cyan, Magenta, Yellow, White,
                      Standout, bolD, Underline
    --nocolor         Same as --color=never
    --icode=name      specify file encoding (repeatable)
    --ocode=name      specify output encoding
    --block=pattern   specify the block of records
    --blockend=s      specify the block end mark (Default: "--\n")
    --inside=pattern  limit matching area
    --outside=pattern opposite of --inside
    --join            delete newline in the matched part
    --joinby string   replace newline in the matched text by string
    --if=filter       set filter command
    --of=filter       output filter command
    --[no]pgp         remember passphrase and use it for PGP processing
    --pgppass=phrase  pgp passphrase
    --readlist        get filenames from stdin
    --glob=glob       glob target files (repeatable)
    --norc            skip reading startup file

=head1 DESCRIPTION

B<greple> has almost the same function as Unix command L<egrep(1)> but
the search is done in the manner similar to search engine.  For
example, next command print lines those contain all of `foo' and `bar'
and `baz'.

    greple 'foo bar baz' ...

Each word can be found in any order and/or any place in the string.
So this command find all of following texts.

    foo bar baz
    baz bar foo
    the foo, bar and baz

If you want to use OR syntax, prepend question (`?') mark on each
token, or use regular expression.

    greple 'foo bar baz ?yabba ?dabba ?doo'
    greple 'foo bar baz yabba|dabba|doo'

This command will print the line which contains all of `foo', `bar'
and `baz' and one or more from `yabba', `dabba' or `doo'.

NOT operator can be specified by prefixing the token by minus (`-')
sign.  Next example will show the line which contain both `foo' and
bar' but none of `yabba' or `dabba' or `doo'.  It is ok to put `+'
mark for positive matching pattern.

    greple 'foo bar -yabba -dabba -doo'
    greple '+foo +bar -yabba|dabba|doo'

This can be written as this using B<-e> and B<-v> option.

    greple -e foo -e bar -v yabba -v dabba -v doo
    greple -e foo -e bar -v 'yabba|dabba|doo'

B<LINE ACROSS MATCH>

B<greple> also search the pattern across the line boundaries.  This is
especially useful to handle Asian multi-byte text.  Japanese text can
be separated by newline almost any place of the text.  So the search
pattern may spread out on multiple lines.  As for ascii text, space
character in the pattern matches any kind of space including newline.
Use B<-e> option to use this capability because space is taken as a
token separator in the bare pattern.


=head1 OPTIONS

=head2 B<PATTERNS>

If specific option is not provided, B<greple> takes the first argument
as a search pattern specified by B<-le> option.  All of these patterns
can be specified multiple times.

Command itself is written in Perl, and any kind of Perl style regular
expression can be used in patterns.

=over 7

=head4 B<--le>=I<pattern>

Treat the string as a collection of tokens separated by spaces.  Each
token is interpreted by the first character.  Token start with `-'
means negative pattern, `?' means alternative, optional `+' and
anything other means positive match.

Next example print lines which contains `foo' and `bar', and one or
more of `yabba' and 'dabba', and none of `bar' and `doo'.

    greple --le='foo bar -baz ?yabba ?dabba -doo'

Multiple `?' preceded tokens are treated all mixed together.  That
means `?A|B ?C|D' is equivalent to `?A|B|C|D'.  If you want to mean
`(A or B) and (C or D)', use AND syntax instead: `A|B C|D'.

=head4 B<-e> I<pattern>, B<--and>=I<pattern>

Specify positive match token.  Next two commands are equivalent.

    greple 'foo bar baz'
    greple -e foo -e bar -e baz

First character is not interpreted, so next commands will search the
pattern `-baz'.

    greple -e -baz

Space characters are treated specially by B<-e> and B<-v> options.
They are replaced by the pattern which matches any number of
white spaces including newline.  So the pattern can be expand to
multiple lines.  Next commands search the series of word `foo', `bar'
and `baz' even if they are separated by newlines.

    greple -e 'foo bar baz'

=head4 B<-v> I<pattern>, B<--not>=I<pattern>

Specify negative match token.  Because it does not affect to the bare
pattern argument, you can narrow down the search result like this.

    greple foo pattern file
    greple foo pattern file -v bar
    greple foo pattern file -v bar -v baz

=head4 B<--re>=I<pattern>

Specify regular expression.  No special treatment for space and wide
characters.

=head4 B<--fe>=I<pattern>

Specify fixed string pattern, like fgrep.

=back


=head2 B<GREP LIKE OPTIONS>

=over 7

=head4 B<-i>

Ignore case.

=head4 B<-l>

List filename only.

=head4 B<-c>, B<--count>

Print count of matched block.

=head4 B<-n>

Show line number.

=head4 B<-h>, B<--no-filename>

Do not display filename.

=head4 B<-H>

Display filename always.

=head4 B<-o>

Print matched string only.

=head4 B<-A>[I<n>], B<--after-context>[=I<n>]

=head4 B<-B>[I<n>], B<--before-context>[=I<n>]

=head4 B<-C>[I<n>], B<--context>[=I<n>]

Print I<n>-blocks before/after matched string.  The value I<n> can be
omitted and the default is 2.  When used with paragraph option B<-p>,
I<n> means number of paragraphs.

Actually, these options expand the area of logical operation.  It
means

    grep -C1 'foo bar baz'

matches following text.

    foo
    bar
    baz

Moreover

    greple -C1 'foo baz'

also matches this text, because matching blocks around `foo' and `bar'
overlaps each other and makes single block.

=head4 B<-f> I<file>, B<--file>=I<file>

Specify the file which contains search pattern.  When file contains
multiple lines, patterns on each lines are search in OR context.  The
line starting with sharp (#) character is ignored.

=head4 B<-->[B<no>]B<decompress>

Switch for handling compressed files.  Default is true.

=head4 B<--color>=I<auto>|I<always>|I<never>, B<--nocolor>

Use terminal color capability to emphasize the matched text.  Default
is `auto': effective when STDOUT is terminal, not otherwise.  Option
value `always' and `never' will work as expected.

Option B<--nocolor> is alias for B<--color>=I<never>.

=head4 B<--colormode>=I<RGBCYMWrgbcymwUBR>, B<--quote>=I<start>,I<end>

Specify color mode.  Use combination string from R(ed), G(reen),
B(lue), C(yan), M(agenta), Y(ellow), W(hite), U(nderline), (bol)D,
S(tandout).  Lowercase form of RGBW means background color.  Default
is RD: RED and BOLD.

If the mode string contains comma `,' character, they are used to
quote the matched string.  If you want to quote the pattern by angle
bracket, use like this.

    greple --quote='<,>' pattern

=back


=head4 B<OTHER OPTIONS>

=over 7

=head4 B<-p>, B<--paragraph>

Print the paragraph which contains the pattern.  Each paragraph is
delimited by two or more successive newline characters by default.  Be
aware that an empty line is not paragraph delimiter if which contains
space characters.  Example:

    greple -np 'setuid script' /usr/man/catl/perl.l

    greple -pe '^struct sockaddr' /usr/include/sys/socket.h

It changes the unit of context specified by B<-A>, B<-B>, B<-C>
options.

=head4 B<--block>=I<pattern>, B<--block>=I<&sub>

Specify the record block to display.

Next command prints entire file because it handles the whole text as a
single large block.

    greple --block='(?s).*'

Next is almost same as B<--paragraph> option.

    greple --block='(.+\n)+'

Next command treat the data as a series of 10-line blocks.

    greple -n --block='(.*\n){1,10}'

When blocks are not continuous and there are gaps between them, the
match occurred outside blocks are ignored.

If multiple block options are supplied, overlapping blocks are merged
into single block.

Please be aware that this option is sometimes quite time consuming,
because it finds all blocks before processing.

=head4 B<--blockend>=I<string>

Change the end mark displayed after B<-pABC> or B<--block> options.
Default value is "--\n".

=head4 B<--inside>=I<pattern>

=head4 B<--outside>=I<pattern>

Option B<--inside> and B<--outside> limit the text area to be matched.
For simple example, if you want to find string `and' not in the word
`command', it can be done like this.

    greple --outside=command and

The block can be larger and expand to multiple lines.  Next command
searches from C source, excluding comment part.

    greple --outside '(?s)/\*.*?\*/'

Next command searches only from POD part of the perl script.

    greple --inside='(?s)^=.*?(^=cut|\Z)'

=head4 B<--inside>=I<&function>

=head4 B<--outside>=I<&function>

If the pattern name begins by ampersand (&) character, it is treated
as a name of subroutine which returns a list of blocks to exclude.
Using this option, user can use arbitrary function to determine from
what part of the text they want to search.  User defined function is
written in F<.greplerc> file or explicitly included by B<--require>
option.

    greple --require mycode.pl --outside `&myfunc' pattern *

Argument can be specified after function name with `=' character.
Next example is equivalent to the above example.

    sub myfunc {
        my($pattern) = @_;
        my @matched;
        my $re = qr/$pattern/m;
        while (/$re/g) {
            push(@matched, [ $-[0], $+[0] ]);
        }
        @matched;
    }

    greple --outside '&myfunc=(?s)/\*.*?\*/' if *.c

B<--outside> and B<--inside> option can be specified mixed together
and multiple times.

=head4 B<--join>

=head4 B<--joinby>=I<string>

Convert newline character found in matched string to empty or specifed
I<string>.  Using B<--join> with B<-o> (only-matching) option, you can
collect searching sentence list in one per line form.  This is almost
useless for English text but sometimes useful for Japanese text.  For
example next command prints the list of KATAKANA words.

    greple -ho --join '\p{utf8::InKatakana}[\n\p{utf8::InKatakana}]*'

=head4 B<--icode>=I<code>

Target file is assumed to be encoded in utf8 by default.  Use this
option to set specific encoding.  When handling Japanese text, you may
choose from 7bit-jis (jis), euc-jp or shiftjis (sjis).  Multiple code
can be supplied using multiple option or combined code names with
space or comma, then file encoding is guessed from those code sets.
Use encoding name `guess' for automatic recognition from default code
list which is euc-jp and 7bit-jis.  Following commands are all
equivalent.

    greple --icode=guess ...
    greple --icode=euc-jp,7bit-jis ...
    greple --icode=euc-jp --icode=7bit-jis ...

Default code set are always included suspect code list.  If you have
just one code adding to suspect list, put + mark before the code name.
Next example does automatic code detection from euc-kr, ascii, utf8
and UTF-16/32.

    greple --icode=+euc-kr ...

=head4 B<--ocode>=I<code>

Specify output code.  Default is utf8.

=head4 B<--cut>=I<n>, B<--allow>=I<n>

Option to compromize matching condition.  Option B<--cut> specifiy the
number to cut down positive match count, and B<--allow> is the number
of negative condition to be overlooked.

    greple --cut=1 --allow=1 'foo bar baz -yabba -dabba -doo'

Above command prints the line which contains two or more from `foo',
`bar' and `baz', and does not include more than one of `yabba',
`dabba' or `doo'.

=head4 B<--if>=I<filter>, B<--if>=I<EXP>:I<filter>:I<EXP>:I<filter>:...

You can specify filter command which is applied to each files before
search.  If only one filter command is specified, it is applied to all
files.  If filter information include multiple fields separated by
colons, first field will be perl expression to check the filename
saved in variable $_.  If it successes, next filter command is pushed.
These expression and command list can be repeated.

    greple --if=rev perg
    greple --if='/\.tar$/:tar tvf -'

If the command doesn't accept standard input as processing data, you
may be able to use special device:

    greple --if='nm /dev/stdin' crypt /usr/lib/lib*

Filters for compressed and gzipped file is set by default unless
B<--nodecompress> option is given.  Default action is like this:

    greple --if='s/\.Z$//:zcat:s/\.g?z$//:gunzip -c'

=head4 B<--of>=I<filter>

Specify output filter commands.

=head4 B<--require>=I<filename>

Include arbitrary perl program.

=head4 B<--pgp>

Invoke PGP decrypt command for files end with .pgp, .gpg or .asc.  PGP
passphrase is asked only once at the beginning of command execution.

=head4 B<--pgppass>=I<phrase>

You can specify PGP passphrase by this option.  Generally, it is not
recommended to use.

=head4 B<--chdir>=I<directory>

Change directory before processing.

=head4 B<--glob>=I<pattern>

Get files matches to specified pattern and use them as a target
files.  Using B<--chdir> and B<--glob> makes easy to use B<greple> for
fixed common job.

=head4 B<--readlist>

Get filenames from standard input.  Read standard input and use each
line as a filename for searching.  You can feed the output from other
command like L<find(1)> for B<greple> with this option.  Next example
searches string from files modified within 7 days:

    find . -mtime -7 -print | greple -S pattern

=head4 B<--man>

Show manual page.

=head4 B<--norc>

Do not read startup file: F<~/.greplerc>.

=begin comment

=head4 B<-d> I<flags>

Display informations.  Various kind of debug, diagnostic, monitor
information can be display by giving appropriate flag to -d option.

    f: processing file name
    s: statistic information
    m: misc debug information
    o: option related information

=end comment

=back


=head1 ENVIRONMENT and STARTUP FILE

Environment variable GREPLEOPTS is used as a default options.  They
are inserted before command line options.

Before starting execution, I<greple> reads the file named F<.greplerc>
on user's home directory.  In rc file, user can define own options.
There are three directives rc file: `option', `define' and `help'.
First argument of `option' directive is user defined option name.  The
rest are processed by I<shellwords> routine defined by
Text::ParseWords module.  Be sure that this module sometimes requires
escape backslashes.

Any kind of string can be used for option name but it is not combined
with other options.

    option --fromcode --outside='(?s)\/\*.*?\*\/'
    option --fromcomment --inside='(?s)\/\*.*?\*\/'

Another directive `define' is almost same as `option', but argument is
not processed by I<shellwords> and treated just a simple text.
Metacharacters can be included without escaping.  Defined string
replacement is done only in definition in option argument.  If you
want to use the word in command line, use option directive instead.
If `help' directive is used for same option name, it will be printed
in usage message.

    define :kana: \p{utf8::InKatakana}
    option --kanalist --color=never -o --join --re ':kana:[:kana:\n]+'
    help   --kanalist List up Katakana string

When I<greple> found `__CODE__' line in F<.greplerc> file, the rest of
the file is evaluated as a Perl program.  You can define your own
subroutines which can be used by --inside and --outside options.  For
those subroutines, file content will be provided by global variable
$_.  Expected response from the subroutine is the list of numbers,
which is made up by start and end offset pairs.

For example, suppose that the following function is defined in your
F<.greplerc> file.

    __CODE__
    sub odd_line {
        my @list;
        my $i;
        while (/.*\n/g) {
            push(@list, [ $-[0], $+[0] ]) if ++$i % 2;
        }
        @list;
    }

You can use next command to search pattern included in odd number
lines.

    % greple --inside &odd_line patten files...

If you do not want to evaluate those programs in all invocation of the
command, use --require option to include arbitrary perl program files.


=head1 HISTORY

Most capability of B<greple> is derived from B<mg> command, which has
been developing from early 1990's by the same author.  Because modern
standard B<grep> family command becomes to have similar capabilities,
it is a time to clean up entire functionarities, totally remodel the
option interfaces, and change the command name. (2013.11)

=head1 AUTHOR

Kazumasa Utashiro


=head1 SEE ALSO

L<grep(1)>, L<perl(1)>


=head1 LICENSE

Copyright (c) 1991-2013 Kazumasa Utashiro

Use and redistribution for ANY PURPOSE are granted as long as all
copyright notices are retained.  Redistribution with modification is
allowed provided that you make your modified version obviously
distinguishable from the original one.  THIS SOFTWARE IS PROVIDED BY
THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES ARE
DISCLAIMED.
